     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				; 使用到486为止的指令
     6 00000000                                 [BITS 32]						; 制作32位用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 源文件名信息
     8 00000000                                 
     9 00000000                                 		; 程序中包含的函数名
    10 00000000                                 		GLOBAL	_io_hlt,_write_mem8 
    11 00000000                                 		GLOBAL _io_cli,_io_sti,_io_stihlt
    12 00000000                                 		GLOBAL _io_in8,_io_in16,_io_in32
    13 00000000                                 		GLOBAL _io_out8,_io_out_16,_io_out_32
    14 00000000                                 		GLOBAL _io_load_eflags,_io_store_eflags
    15 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    16 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    17 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
    18 00000000                                 
    19 00000000                                 ; 以下是实际的函数
    20                                          [SECTION .text]
    21 00000000                                 
    22 00000000                                 _io_hlt:	; void io_hlt(void);
    23 00000000 F4                              		HLT
    24 00000001 C3                              		RET
    25 00000002                                 
    26 00000002                                 _io_cli:	; void io_cli(void);
    27 00000002 FA                              		CLI
    28 00000003 C3                              		RET
    29 00000004                                 
    30 00000004                                 _io_sti:	; void io_sti(void);
    31 00000004 FB                              		STI
    32 00000005 C3                              		RET
    33 00000006                                 
    34 00000006                                 _io_stihlt:	; void io_stihlt(void);
    35 00000006 FB                              		STI
    36 00000007 F4                              		HLT
    37 00000008 C3                              		RET
    38 00000009                                 
    39 00000009                                 _io_in8:	; int io_in8(int port);
    40 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    41 0000000D B8 00000000                     		MOV		EAX,0
    42 00000012 EC                              		IN		AL,DX
    43 00000013 C3                              		RET
    44 00000014                                 
    45 00000014                                 _io_in16:	; int io_in16(int port);
    46 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    47 00000018 B8 00000000                     		MOV		EAX,0
    48 0000001D 66 ED                           		IN		AX,DX
    49 0000001F C3                              		RET
    50 00000020                                 
    51 00000020                                 _io_in32:	; int io_in32(int port);
    52 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 00000024 ED                              		IN		EAX,DX
    54 00000025 C3                              		RET
    55 00000026                                 
    56 00000026                                 _io_out8:	; void io_out8(int port, int data);
    57 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    58 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    59 0000002E EE                              		OUT		DX,AL
    60 0000002F C3                              		RET
    61 00000030                                 
    62 00000030                                 _io_out16:	; void io_out16(int port, int data);
    63 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    64 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    65 00000038 66 EF                           		OUT		DX,AX
    66 0000003A C3                              		RET
    67 0000003B                                 
    68 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    69 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    70 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    71 00000043 EF                              		OUT		DX,EAX
    72 00000044 C3                              		RET
    73 00000045                                 
    74 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    75 00000045 9C                              		PUSHFD		; PUSH EFLAGS
    76 00000046 58                              		POP		EAX
    77 00000047 C3                              		RET
    78 00000048                                 
    79 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    80 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    81 0000004C 50                              		PUSH	EAX
    82 0000004D 9D                              		POPFD		; POP EFLAGS
    83 0000004E C3                              		RET
    84 0000004F                                 
    85 0000004F                                 _write_mem8:	; void write_mem8(int addr, int data);
    86 0000004F 8B 4C 24 04                     		MOV		ECX,[ESP+4]		; [ESP+4]中存放的是地址，将其读入ECX
    87 00000053 8A 44 24 08                     		MOV		AL,[ESP+8]		; [ESP+8]中存放的是数据，将其读入AL
    88 00000057 88 01                           		MOV		[ECX],AL
    89 00000059 C3                              		RET
    90 0000005A                                 
    91 0000005A                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 0000005A 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 0000005F 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000064 0F 01 54 24 06                  		LGDT	[ESP+6]
    95 00000069 C3                              		RET
    96 0000006A                                 
    97 0000006A                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 0000006A 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    99 0000006F 66 89 44 24 06                  		MOV		[ESP+6],AX
   100 00000074 0F 01 5C 24 06                  		LIDT	[ESP+6]
   101 00000079 C3                              		RET
   102 0000007A                                 
   103 0000007A                                 _asm_inthandler21:
   104 0000007A 06                              		PUSH	ES
   105 0000007B 1E                              		PUSH	DS
   106 0000007C 60                              		PUSHAD
   107 0000007D 89 E0                           		MOV		EAX,ESP
   108 0000007F 50                              		PUSH	EAX
   109 00000080 66 8C D0                        		MOV		AX,SS
   110 00000083 8E D8                           		MOV		DS,AX
   111 00000085 8E C0                           		MOV		ES,AX
   112 00000087 E8 [00000000]                   		CALL	_inthandler21
   113 0000008C 58                              		POP		EAX
   114 0000008D 61                              		POPAD
   115 0000008E 1F                              		POP		DS
   116 0000008F 07                              		POP		ES
   117 00000090 CF                              		IRETD
   118 00000091                                 
   119 00000091                                 _asm_inthandler27:
   120 00000091 06                              		PUSH	ES
   121 00000092 1E                              		PUSH	DS
   122 00000093 60                              		PUSHAD
   123 00000094 89 E0                           		MOV		EAX,ESP
   124 00000096 50                              		PUSH	EAX
   125 00000097 66 8C D0                        		MOV		AX,SS
   126 0000009A 8E D8                           		MOV		DS,AX
   127 0000009C 8E C0                           		MOV		ES,AX
   128 0000009E E8 [00000000]                   		CALL	_inthandler27
   129 000000A3 58                              		POP		EAX
   130 000000A4 61                              		POPAD
   131 000000A5 1F                              		POP		DS
   132 000000A6 07                              		POP		ES
   133 000000A7 CF                              		IRETD
   134 000000A8                                 
   135 000000A8                                 _asm_inthandler2c:
   136 000000A8 06                              		PUSH	ES
   137 000000A9 1E                              		PUSH	DS
   138 000000AA 60                              		PUSHAD
   139 000000AB 89 E0                           		MOV		EAX,ESP
   140 000000AD 50                              		PUSH	EAX
   141 000000AE 66 8C D0                        		MOV		AX,SS
   142 000000B1 8E D8                           		MOV		DS,AX
   143 000000B3 8E C0                           		MOV		ES,AX
   144 000000B5 E8 [00000000]                   		CALL	_inthandler2c
   145 000000BA 58                              		POP		EAX
   146 000000BB 61                              		POPAD
   147 000000BC 1F                              		POP		DS
   148 000000BD 07                              		POP		ES
   149 000000BE CF                              		IRETD